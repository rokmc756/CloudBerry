---
- name: Get Network Interface name From Prefix of IP Addresses Provided for CloudBerry Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', cbdb.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', cbdb.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', cbdb.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address from Provided Network Device Name
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


- name: Define Facts For All GPHOST's Hostname
  set_fact:
    all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
- debug: msg={{ all_ext1_hostnames }}


- name: Define Fact For All Hosts of First IP Addresses
  set_fact:
    all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"
- debug: msg={{ all_net0_ipaddrs }}


- name: Set Default Network Device and Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _ipaddr: "{{ ipaddr1 }}"


- name: Set Name for Binary Installer File ( Name Includes Build Number )
  set_fact:
    binary_installer_file: "{{ cbdb.pkg_name }}-{{ cbdb.major_version }}.{{ cbdb.minor_version }}.{{ cbdb.patch_version }}-{{ cbdb.build_version }}.{{ cbdb.os_name }}.{{ cbdb.arch_name }}"
    install_path: "{{ cbdb.pkg_name }}-{{ cbdb.major_version }}.{{ cbdb.minor_version }}.{{ cbdb.patch_version }}"
    link_path: "{{ cbdb.pkg_name }}"
  when: cbdb.major_version|int == 1 and cbdb.minor_version|int == 6


- name: Set Name for Binary Installer File ( Name Does Not Include Build Number )
  set_fact:
    binary_installer_file: "{{ cbdb.pkg_name }}-{{ cbdb.major_version }}.{{ cbdb.minor_version }}.{{ cbdb.patch_version }}-{{ cbdb.build_version }}.{{ cbdb.os_name }}.{{ cbdb.arch_name }}"
    install_path: "{{ cbdb.pkg_name }}"
    link_path: "{{ cbdb.pkg_name }}"
  when: cbdb.major_version|int == 1 and cbdb.minor_version|int == 5


- set_fact:
    cbdb_network_range: "{{ hostvars[inventory_hostname][_netdev]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- name: Get the Specific IP Address for All Hosts
  set_fact:
    prod_ip_addr_range: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item | ansible.utils.ipaddr( cbdb_network_range )"

- name: Print the Value of SHMALL
  shell: "echo $(expr $(getconf _PHYS_PAGES) / 2)"
  register: shmall_fact


- name: Set Fact for SHMALL
  set_fact:
    shmall_var: "{{ shmall_fact.stdout }}"


- name: Set Fact for SHMALL
  set_fact:
    shmall_var: "{{ shmall_fact.stdout }}"


- name: Print the Value of SHMMAX
  shell: "echo $(expr $(getconf _PHYS_PAGES) / 2 \\* $(getconf PAGE_SIZE))"
  register: shmmax_fact


- name: Set Fact for SHMMAX
  set_fact:
    shmmax_var: "{{ shmmax_fact.stdout }}"


# - debug: msg={{ shmall_var }}
# - debug: msg={{ shmmax_var }}


